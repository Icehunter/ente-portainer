services:
  museum:
    image: ghcr.io/ente-io/server
    ports:
      - 28080:8080 # API
      - 22112:2112 # Prometheus metrics
    depends_on:
      - postgres
    environment:
      # Pass-in the config to connect to the DB and MinIO
      ENTE_CREDENTIALS_FILE: /credentials.yaml
    volumes:
      - /mnt/storage/apps/ente/custom-logs:/var/logs
      - /mnt/storage/apps/ente/scripts/museum.yaml:/museum.yaml:ro
      - /mnt/storage/apps/ente/scripts/credentials.yaml:/credentials.yaml:ro
      - /mnt/storage/apps/ente/data:/data:ro

  # Resolve "localhost:3200" in the museum container to the minio container.
  socat:
    image: alpine/socat
    network_mode: service:museum
    depends_on:
      - museum
    command: 'TCP-LISTEN:3200,fork,reuseaddr TCP:minio:3200'

  postgres:
    image: postgres:15
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpass
      POSTGRES_DB: ente_db
    # Wait for postgres to accept connections before starting museum.
    healthcheck:
      test: ['CMD', 'pg_isready', '-q', '-d', 'ente_db', '-U', 'pguser']
      start_period: 40s
      start_interval: 1s
    volumes:
      - /mnt/marin/apps/ente/postgres-data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    # Use different ports than the minio defaults to avoid conflicting
    # with the ports used by Prometheus.
    ports:
      - 3200:3200 # API
      - 3201:3201 # Console
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: testtest
    command: server /data --address ":3200" --console-address ":3201"
    volumes:
      - /mnt/marin/apps/ente/minio-data:/data

  minio-provision:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - /mnt/storage/apps/ente/scripts/minio-provision.sh:/provision.sh:ro
      - /mnt/marin/apps/ente/minio-data:/data
    entrypoint: sh /provision.sh
